services:
  app-dev:
    build:
      context: .
      dockerfile: Dockerfile
    image: rmd_nest_dev:1.0.0
    container_name: rmd_nest_dev
    environment:
      - PORT_DEV=${PORT_DEV}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRATION=${JWT_EXPIRATION}
      - REFRESH_JWT_SECRET=${REFRESH_JWT_SECRET}
      - REFRESH_JWT_EXPIRATION=${REFRESH_JWT_EXPIRATION}
      - ENVIRONMENT=${ENVIRONMENT}
      - GLOBAL_PREFIX=${GLOBAL_PREFIX}
      - RESEND_API_KEY=${RESEND_API_KEY}
      - DOMAIN=${DOMAIN}
      - EMAIL_REPLY_TO=${EMAIL_REPLY_TO}
      - TRANSACTION_TIMEOUT=${TRANSACTION_TIMEOUT}
      - DATABASE_URL_DEV=${DATABASE_URL_DEV}
      - CLIENT_DEV=${CLIENT_DEV}
      - FILE_PREFIX_DEV=${FILE_PREFIX_DEV}
      - EMAIL_FROM_DEV=${EMAIL_FROM_DEV}
    ports:
      - "${PORT_DEV}:${PORT_DEV}"
    depends_on:
      db-dev:
        condition: service_healthy
    volumes:
      - ./src:/app/src
      - ./uploads:/app/uploads
    networks:
      - rmd_nest_network
    profiles:
      - dev

  app-prod:
    build:
      context: .
      dockerfile: Dockerfile
    image: rmd_nest_prod:1.0.0
    container_name: rmd_nest_prod
    environment:
      - PORT_PROD=${PORT_PROD}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRATION=${JWT_EXPIRATION}
      - REFRESH_JWT_SECRET=${REFRESH_JWT_SECRET}
      - REFRESH_JWT_EXPIRATION=${REFRESH_JWT_EXPIRATION}
      - ENVIRONMENT=${ENVIRONMENT}
      - GLOBAL_PREFIX=${GLOBAL_PREFIX}
      - RESEND_API_KEY=${RESEND_API_KEY}
      - DOMAIN=${DOMAIN}
      - EMAIL_REPLY_TO=${EMAIL_REPLY_TO}
      - TRANSACTION_TIMEOUT=${TRANSACTION_TIMEOUT}
      - DATABASE_URL_PROD=${DATABASE_URL_PROD}
      - CLIENT_PROD=${CLIENT_PROD}
      - FILE_PREFIX_PROD=${FILE_PREFIX_PROD}
      - EMAIL_FROM_PROD=${EMAIL_FROM_PROD}
    ports:
      - "${PORT_PROD}:${PORT_PROD}"
    depends_on:
      - db-prod
    volumes:
      - ./src:/app/src
      - ./uploads:/app/uploads
    networks:
      - rmd_nest_network
    profiles:
      - prod

  db-dev:
    image: postgres:15
    restart: always
    container_name: rmd_nest_db_dev
    environment:
      POSTGRES_USER: ${DATABASE_USER_DEV}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD_DEV}
      POSTGRES_DB: ${DATABASE_DB_DEV}
    volumes:
      - db_data_dev:/var/lib/postgresql/data
    ports:
      - "${DATABASE_PORT_DEV}:5432"
    networks:
      - rmd_nest_network
    profiles:
      - dev
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${DATABASE_USER_DEV} -d ${DATABASE_DB_DEV}",
        ]
      interval: 5s
      timeout: 5s
      retries: 5

  db-prod:
    image: postgres:15
    restart: always
    container_name: rmd_nest_db_prod
    environment:
      POSTGRES_USER: ${DATABASE_USER_PROD}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD_PROD}
      POSTGRES_DB: ${DATABASE_DB_PROD}
    volumes:
      - db_data_prod:/var/lib/postgresql/data
    ports:
      - "${DATABASE_PORT_PROD}:5432"
    networks:
      - rmd_nest_network
    profiles:
      - prod
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${DATABASE_USER_PROD} -d ${DATABASE_DB_PROD}",
        ]
      interval: 5s
      timeout: 5s
      retries: 5

  pg-admin-dev:
    image: dpage/pgadmin4
    restart: always
    container_name: rmd_nest_pgadmin_dev
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PG_ADMIN_EMAIL_DEV}
      - PGADMIN_DEFAULT_PASSWORD=${PG_ADMIN_PASSWORD_DEV}
    volumes:
      - pg_admin_dev:/var/lib/pgadmin
    ports:
      - "${PG_ADMIN_HOST_PORT_DEV}:${PG_ADMIN_CONTAINER_PORT_DEV}"
    depends_on:
      - db-dev
    networks:
      - rmd_nest_network
    profiles:
      - dev

  pg-admin-prod:
    image: dpage/pgadmin4
    restart: always
    container_name: rmd_nest_pgadmin_prod
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PG_ADMIN_EMAIL_PROD}
      - PGADMIN_DEFAULT_PASSWORD=${PG_ADMIN_PASSWORD_PROD}
    volumes:
      - pg_admin_prod:/var/lib/pgadmin
    ports:
      - "${PG_ADMIN_HOST_PORT_PROD}:${PG_ADMIN_CONTAINER_PORT_PROD}"
    depends_on:
      - db-prod
    networks:
      - rmd_nest_network
    profiles:
      - prod

networks:
  rmd_nest_network:
    driver: bridge

volumes:
  db_data_dev:
  db_data_prod:
  pg_admin_dev:
  pg_admin_prod:
