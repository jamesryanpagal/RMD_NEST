// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ROLE {
  ADMIN
  SECRETARY
}

enum STATUS {
  ACTIVE
  DELETED
}

enum PHASE_STATUS {
  ACTIVE
  INACTIVE
  DELETED
  FULL_SLOT
}

enum MISCELLANEOUS {
  ZERO
  TEN
}

enum COMMISSION {
  FIVE
  SEVEN
  TEN
  FIFTEEN
}

enum MODE_OF_PAYMENT {
  CASH
  GCASH
  ONLINE_BANKING
  CHEQUE
}

enum PAYMENT_SCHEDULE {
  MONTHLY
  QUARTERLY
  ANNUAL
}

model User {
  id         Int     @default(autoincrement())
  userId     String  @id @default(cuid())
  firstName  String
  middleName String?
  lastName   String
  email      String
  password   String
  phone      String?
  mobile     String

  houseNumber String?
  street      String
  barangay    String
  subdivision String?
  city        String
  province    String?
  region      String
  zip         String?

  role ROLE

  admin     Admin?
  secretary Secretary?

  status STATUS @default(ACTIVE)

  dateCreated DateTime  @default(now())
  dateUpdated DateTime  @updatedAt
  dateDeleted DateTime?
}

model Admin {
  id           Int     @default(autoincrement())
  adminId      String  @id @default(cuid())
  userId       String  @unique
  isSuperAdmin Boolean @default(false)
  accessLevel  Int[]

  user User @relation(fields: [userId], references: [userId])

  dateCreated DateTime  @default(now())
  dateUpdated DateTime  @updatedAt
  dateDeleted DateTime?
}

model Secretary {
  id          Int    @default(autoincrement())
  secretaryId String @id @default(cuid())
  userId      String @unique
  accessLevel Int[]

  user User @relation(fields: [userId], references: [userId])

  dateCreated DateTime  @default(now())
  dateUpdated DateTime  @updatedAt
  dateDeleted DateTime?
}

model Client {
  id            Int     @default(autoincrement())
  clientId      String  @id @default(cuid())
  firstName     String
  middleName    String?
  lastName      String
  email         String
  contactNumber String
  tinNumber     String

  houseNumber String?
  street      String
  barangay    String
  subdivision String?
  city        String
  province    String?
  region      String
  zip         String?

  block         String
  lot           Int[]
  sqm           Float
  sqmPrice      Float
  downPayment   Float
  terms         Int
  miscellaneous MISCELLANEOUS

  agent      String
  commission COMMISSION

  project UserProject[]
  payment Payment[]

  status STATUS @default(ACTIVE)

  dateCreated DateTime  @default(now())
  dateUpdated DateTime  @updatedAt
  dateDeleted DateTime?
}

model Project {
  id          Int    @default(autoincrement())
  projectId   String @id @default(cuid())
  clientId    String
  projectName String

  payment Payment[]
  client  UserProject[]
  phase   Phase[]

  status STATUS @default(ACTIVE)

  dateCreated DateTime  @default(now())
  dateUpdated DateTime  @updatedAt
  dateDeleted DateTime?
}

model Phase {
  id        Int    @default(autoincrement())
  projectId String @unique
  phaseId   String @id @default(cuid())

  title  String
  status PHASE_STATUS @default(ACTIVE)

  project Project @relation(fields: [projectId], references: [projectId])
  block   Block[]

  dateCreated DateTime  @default(now())
  dateUpdated DateTime  @updatedAt
  dateDeleted DateTime?
}

model Block {
  id      Int    @default(autoincrement())
  blockId String @id @default(cuid())
  phaseId String @unique
  title   String

  status STATUS @default(ACTIVE)

  phase Phase @relation(fields: [phaseId], references: [phaseId])
  lot   Lot[]

  dateCreated DateTime  @default(now())
  dateUpdated DateTime  @updatedAt
  dateDeleted DateTime?
}

model Lot {
  id      Int    @default(autoincrement())
  lotId   String @id @default(cuid())
  blockId String @unique
  title   String

  status STATUS @default(ACTIVE)

  block Block @relation(fields: [blockId], references: [blockId])

  dateCreated DateTime  @default(now())
  dateUpdated DateTime  @updatedAt
  dateDeleted DateTime?
}

model Payment {
  id        Int    @default(autoincrement())
  receiptId String @id @default(cuid())
  clientId  String @unique
  projectId String

  modeOfPayment   MODE_OF_PAYMENT
  paymentDate     DateTime
  amount          Float
  referenceNumber String
  paymentSchedule PAYMENT_SCHEDULE

  project Project @relation(fields: [projectId], references: [projectId])
  client  Client  @relation(fields: [clientId], references: [clientId])

  status STATUS @default(ACTIVE)

  dateCreated DateTime  @default(now())
  dateUpdated DateTime  @updatedAt
  dateDeleted DateTime?
}

// JUNCTION TABLE
model UserProject {
  clientId String @unique
  client   Client @relation(fields: [clientId], references: [clientId])

  projectId String  @unique
  project   Project @relation(fields: [projectId], references: [projectId])

  @@id([clientId, projectId])
}
