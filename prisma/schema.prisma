// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  output        = "../generated/prisma"
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL_DEV")
}

enum ROLE {
  ADMIN
  SECRETARY
}

enum REQUEST_MODULE {
  CLIENT
  RESERVATION
  CONTRACT
  PAYMENT
  AGENT_COMMISSION
  FILE
}

enum REQUEST_REJECT_DELETE {
  DELETE
  REJECT
}

enum REQUEST_STATUS {
  PENDING
  APPROVED
  REJECTED
  DELETED
}

enum REQUEST_TYPE {
  ADD
  UPDATE
  DELETE
}

enum STATUS {
  ACTIVE
  DELETED
}

enum AGENT_COMMISSION_STATUS {
  PENDING
  DELETED
  ON_GOING
  DONE
}

enum CONTRACT_STATUS {
  ON_GOING
  FORFEITED
  DONE
  DELETED
}

enum LOT_STATUS {
  OPEN
  PENDING
  ON_GOING
  CLOSED
  SOLD
  DELETED
}

enum PHASE_STATUS {
  ACTIVE
  INACTIVE
  DELETED
  FULL_SLOT
}

enum MISCELLANEOUS {
  ZERO
  TEN
}

enum COMMISSION {
  FIVE
  SEVEN
  TEN
  TWELVE
  FIFTEEN
}

enum MODE_OF_PAYMENT {
  CASH
  GCASH
  ONLINE_BANKING
  CHEQUE
}

enum PAYMENT_TYPE {
  CASH
  INSTALLMENT
}

enum TRANSACTION_TYPE {
  HOLDING_FEE
  RESERVATION_FEE
  PARTIAL_DOWN_PAYMENT
  FULL_DOWN_PAYMENT
  MONTHLY_PAYMENT
  TCP_FULL_PAYMENT
  DOWN_PAYMENT
  SURVEY_FEE
  AGENT_COMMISSION_RELEASE
}

enum DOWN_PAYMENT_TYPE {
  FULL_DOWN_PAYMENT
  PARTIAL_DOWN_PAYMENT
}

enum RESERVATION_STATUS {
  ACTIVE
  FORFEITED
  DONE
  DELETED
}

enum DOWN_PAYMENT_STATUS {
  ON_GOING
  FORFEITED
  DONE
}

enum PLATFORM {
  WEB
  MOBILE
}

enum PAYMENT_TARGET {
  MONTHLY_CONTRACT
  MONTHLY_CONTRACT_DOWN_PAYMENT
}

model User {
  id         String  @id @default(cuid())
  firstName  String
  middleName String?
  lastName   String
  email      String
  password   String
  phone      String?
  mobile     String

  houseNumber String?
  street      String
  barangay    String
  subdivision String?
  city        String
  province    String?
  region      String
  zip         String?

  role ROLE

  admin       Admin?
  secretary   Secretary?
  authSession AuthSession[]

  status STATUS @default(ACTIVE)

  createdBy String?
  updatedBy String?
  deletedBy String?

  dateCreated DateTime  @default(now())
  dateUpdated DateTime  @updatedAt
  dateDeleted DateTime?
}

model AuthSession {
  id         String  @id @default(cuid())
  userId     String
  token_hash String?

  user User @relation(fields: [userId], references: [id])

  expiration DateTime?

  created_by  String?
  modified_by String?
  deleted_by  String?

  created_date  DateTime  @default(now())
  modified_date DateTime  @updatedAt
  deleted_date  DateTime?
}

model Admin {
  id           String  @id @default(cuid())
  userId       String  @unique
  isSuperAdmin Boolean @default(false)
  accessLevel  Int[]

  user User @relation(fields: [userId], references: [id])

  createdBy String?
  updatedBy String?
  deletedBy String?

  dateCreated DateTime  @default(now())
  dateUpdated DateTime  @updatedAt
  dateDeleted DateTime?
}

model Secretary {
  id          String @id @default(cuid())
  userId      String @unique
  accessLevel Int[]

  user User @relation(fields: [userId], references: [id])

  createdBy String?
  updatedBy String?
  deletedBy String?

  dateCreated DateTime  @default(now())
  dateUpdated DateTime  @updatedAt
  dateDeleted DateTime?
}

model Client {
  id            String  @id @default(cuid())
  firstName     String
  middleName    String?
  lastName      String
  email         String
  contactNumber String
  tinNumber     String

  houseNumber String?
  street      String
  barangay    String
  subdivision String?
  city        String
  province    String?
  region      String
  zip         String?

  project  UserProject[]
  contract Contract[]

  reservation Reservation[]

  clientRequest ClientRequest[]

  status STATUS @default(ACTIVE)

  createdBy String?
  updatedBy String?
  deletedBy String?

  dateCreated DateTime  @default(now())
  dateUpdated DateTime  @updatedAt
  dateDeleted DateTime?
}

model ClientRequest {
  id       String  @id @default(cuid())
  targetId String?

  firstName     String
  middleName    String?
  lastName      String
  email         String
  contactNumber String
  tinNumber     String

  houseNumber String?
  street      String
  barangay    String
  subdivision String?
  city        String
  province    String?
  region      String
  zip         String?

  requestType REQUEST_TYPE

  client Client? @relation(fields: [targetId], references: [id])

  status REQUEST_STATUS @default(PENDING)

  approvedBy String?
  rejectedBy String?
  createdBy  String?
  updatedBy  String?
  deletedBy  String?

  dateCreated  DateTime  @default(now())
  dateUpdated  DateTime  @updatedAt
  dateDeleted  DateTime?
  dateRejected DateTime?
}

model Project {
  id          String  @id @default(cuid())
  order       Int     @default(autoincrement())
  projectName String
  description String?

  houseNumber String?
  street      String
  barangay    String
  subdivision String?
  city        String
  province    String?
  region      String
  zip         String?

  client UserProject[]
  phase  Phase[]

  status STATUS @default(ACTIVE)

  createdBy String?
  updatedBy String?
  deletedBy String?

  dateCreated DateTime  @default(now())
  dateUpdated DateTime  @updatedAt
  dateDeleted DateTime?
}

model Contract {
  id       String @id @default(cuid())
  clientId String
  lotId    String
  agentId  String

  sqmPrice                Float
  downPaymentType         DOWN_PAYMENT_TYPE?
  downPaymentStatus       DOWN_PAYMENT_STATUS?
  totalMonthlyDown        Float?
  totalMonthly            Float?
  downPayment             Int?
  totalDownPayment        Float?
  totalDownPaymentBalance Float?
  downPaymentTerms        Int?
  terms                   Int?
  miscellaneous           MISCELLANEOUS
  miscellaneousTotal      Float
  agentCommission         COMMISSION
  agentCommissionTotal    Float
  balance                 Float
  totalLotPrice           Float
  tcp                     Float
  paymentType             PAYMENT_TYPE
  totalCashPayment        Float?
  recurringPaymentDay     Int?
  nextPaymentDate         String?
  paymentStartedDate      String?
  paymentLastDate         String?
  penaltyAmount           Float                @default(0)
  penaltyCount            Int                  @default(0)

  excessPayment Float @default(0)

  client            Client?           @relation(fields: [clientId], references: [id])
  lot               Lot?              @relation(fields: [lotId], references: [id])
  agent             Agent             @relation(fields: [agentId], references: [id])
  commissionOfAgent AgentCommission?
  payment           Payment[]
  contractRequest   ContractRequest[]

  status CONTRACT_STATUS @default(ON_GOING)

  createdBy String?
  updatedBy String?
  deletedBy String?

  dateCreated DateTime  @default(now())
  dateUpdated DateTime  @updatedAt
  dateDeleted DateTime?
}

model ContractRequest {
  id       String  @id @default(cuid())
  targetId String?

  sqmPrice                Float
  downPaymentType         DOWN_PAYMENT_TYPE?
  downPaymentStatus       DOWN_PAYMENT_STATUS?
  totalMonthlyDown        Float?
  totalMonthly            Float?
  downPayment             Int?
  totalDownPayment        Float?
  totalDownPaymentBalance Float?
  downPaymentTerms        Int?
  terms                   Int?
  miscellaneous           MISCELLANEOUS
  miscellaneousTotal      Float
  agentCommission         COMMISSION
  agentCommissionTotal    Float
  balance                 Float
  totalLotPrice           Float
  tcp                     Float
  paymentType             PAYMENT_TYPE
  totalCashPayment        Float?
  recurringPaymentDay     Int?
  nextPaymentDate         String?
  paymentStartedDate      String?
  paymentLastDate         String?
  penaltyAmount           Float                @default(0)
  penaltyCount            Int                  @default(0)

  excessPayment Float @default(0)

  requestType REQUEST_TYPE

  contract Contract? @relation(fields: [targetId], references: [id])

  status REQUEST_STATUS @default(PENDING)

  approvedBy String?
  rejectedBy String?
  createdBy  String?
  updatedBy  String?
  deletedBy  String?

  dateCreated  DateTime  @default(now())
  dateUpdated  DateTime  @updatedAt
  dateDeleted  DateTime?
  dateRejected DateTime?
}

model Phase {
  id        String @id @default(cuid())
  order     Int    @default(autoincrement())
  projectId String

  title  String
  status PHASE_STATUS @default(ACTIVE)

  project Project @relation(fields: [projectId], references: [id])
  block   Block[]

  createdBy String?
  updatedBy String?
  deletedBy String?

  dateCreated DateTime  @default(now())
  dateUpdated DateTime  @updatedAt
  dateDeleted DateTime?
}

model Block {
  id      String @id @default(cuid())
  order   Int    @default(autoincrement())
  phaseId String
  title   String

  status STATUS @default(ACTIVE)

  phase Phase @relation(fields: [phaseId], references: [id])
  lot   Lot[]

  createdBy String?
  updatedBy String?
  deletedBy String?

  dateCreated DateTime  @default(now())
  dateUpdated DateTime  @updatedAt
  dateDeleted DateTime?
}

model Lot {
  id      String @id @default(cuid())
  order   Int    @default(autoincrement())
  blockId String
  title   String
  sqm     Float?

  status LOT_STATUS @default(OPEN)

  block       Block         @relation(fields: [blockId], references: [id])
  contract    Contract[]
  reservation Reservation[]

  createdBy String?
  updatedBy String?
  deletedBy String?

  dateCreated DateTime  @default(now())
  dateUpdated DateTime  @updatedAt
  dateDeleted DateTime?
}

model Payment {
  id                String  @id @default(cuid())
  contractId        String?
  reservationId     String? @unique
  agentCommissionId String?

  transactionType TRANSACTION_TYPE
  modeOfPayment   MODE_OF_PAYMENT
  targetDueDate   String?
  paymentDate     String
  amount          Float
  referenceNumber String?

  files              File[]
  reservationRequest ReservationRequest[]

  contract        Contract?        @relation(fields: [contractId], references: [id])
  reservation     Reservation?     @relation(fields: [reservationId], references: [id])
  agentCommission AgentCommission? @relation(fields: [agentCommissionId], references: [id])

  payment PaymentRequest[]

  penalized     Boolean @default(false)
  penaltyAmount Float   @default(0)

  receiptNo String?

  status STATUS @default(ACTIVE)

  createdBy String?
  updatedBy String?
  deletedBy String?

  dateCreated DateTime  @default(now())
  dateUpdated DateTime  @updatedAt
  dateDeleted DateTime?
}

model PaymentRequest {
  id       String  @id @default(cuid())
  targetId String?

  transactionType TRANSACTION_TYPE
  modeOfPayment   MODE_OF_PAYMENT
  targetDueDate   String?
  paymentDate     String
  amount          Float
  referenceNumber String?

  penalized     Boolean @default(false)
  penaltyAmount Float   @default(0)

  receiptNo String?

  payment Payment? @relation(fields: [targetId], references: [id])

  requestType REQUEST_TYPE
  status      REQUEST_STATUS @default(PENDING)

  approvedBy String?
  rejectedBy String?
  createdBy  String?
  updatedBy  String?
  deletedBy  String?

  dateCreated  DateTime  @default(now())
  dateUpdated  DateTime  @updatedAt
  dateDeleted  DateTime?
  dateRejected DateTime?
}

model Reservation {
  id       String @id @default(cuid())
  lotId    String
  clientId String

  validity DateTime

  lot     Lot      @relation(fields: [lotId], references: [id])
  client  Client   @relation(fields: [clientId], references: [id])
  payment Payment?

  status RESERVATION_STATUS @default(ACTIVE)

  createdBy String?
  updatedBy String?
  deletedBy String?

  dateCreated DateTime  @default(now())
  dateUpdated DateTime  @updatedAt
  dateDeleted DateTime?
}

model ReservationRequest {
  id       String  @id @default(cuid())
  targetId String?

  modeOfPayment   MODE_OF_PAYMENT
  paymentDate     String
  amount          Int
  referenceNumber String?

  payment Payment? @relation(fields: [targetId], references: [id])

  requestType REQUEST_TYPE

  status REQUEST_STATUS @default(PENDING)

  approvedBy String?
  rejectedBy String?
  createdBy  String?
  updatedBy  String?
  deletedBy  String?

  dateCreated  DateTime  @default(now())
  dateUpdated  DateTime  @updatedAt
  dateDeleted  DateTime?
  dateRejected DateTime?
}

model Agent {
  id         String  @id @default(cuid())
  firstName  String
  middleName String?
  lastName   String
  birthDate  String?

  contract        Contract[]
  agentCommission AgentCommission[]

  status STATUS @default(ACTIVE)

  createdBy String?
  updatedBy String?
  deletedBy String?

  dateCreated DateTime  @default(now())
  dateUpdated DateTime  @updatedAt
  dateDeleted DateTime?
}

model AgentCommission {
  id                   String @id @default(cuid())
  agentId              String
  contractId           String @unique
  terms                Int?
  recurringReleaseDate Int?

  releaseStartDate     String?
  releaseEndDate       String?
  nextReleaseDate      String?
  monthlyReleaseAmount Float?

  balance Float @default(0)

  agent    Agent     @relation(fields: [agentId], references: [id])
  contract Contract  @relation(fields: [contractId], references: [id])
  payment  Payment[]

  status AGENT_COMMISSION_STATUS @default(PENDING)

  createdBy String?
  updatedBy String?
  deletedBy String?

  dateCreated DateTime  @default(now())
  dateUpdated DateTime  @updatedAt
  dateDeleted DateTime?
}

model AgentCommissionRequest {
  id       String  @id @default(cuid())
  targetId String?

  terms                Int?
  recurringReleaseDate Int?

  releaseStartDate     String?
  releaseEndDate       String?
  nextReleaseDate      String?
  monthlyReleaseAmount Float?

  balance Float @default(0)

  requestType REQUEST_TYPE

  status REQUEST_STATUS @default(PENDING)

  approvedBy String?
  rejectedBy String?
  createdBy  String?
  updatedBy  String?
  deletedBy  String?

  dateCreated  DateTime  @default(now())
  dateUpdated  DateTime  @updatedAt
  dateDeleted  DateTime?
  dateRejected DateTime?
}

model File {
  id        String  @id @default(cuid())
  paymentId String?

  path        String?
  ext         String?
  name        String?
  description String?

  payment     Payment?      @relation(fields: [paymentId], references: [id])
  fileRequest FileRequest[]

  status STATUS @default(ACTIVE)

  createdBy String?
  updatedBy String?
  deletedBy String?

  dateCreated DateTime  @default(now())
  dateUpdated DateTime  @updatedAt
  dateDeleted DateTime?
}

model FileRequest {
  id       String  @id @default(cuid())
  targetId String?

  path        String?
  ext         String?
  name        String?
  description String?

  file File? @relation(fields: [targetId], references: [id])

  requestType REQUEST_TYPE
  status      REQUEST_STATUS @default(PENDING)

  approvedBy String?
  rejectedBy String?
  createdBy  String?
  updatedBy  String?
  deletedBy  String?

  dateCreated  DateTime  @default(now())
  dateUpdated  DateTime  @updatedAt
  dateDeleted  DateTime?
  dateRejected DateTime?
}

// JUNCTION TABLE
model UserProject {
  clientId String @unique
  client   Client @relation(fields: [clientId], references: [id])

  projectId String  @unique
  project   Project @relation(fields: [projectId], references: [id])

  @@id([clientId, projectId])
}
