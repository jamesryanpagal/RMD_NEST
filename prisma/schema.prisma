// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ROLE {
  ADMIN
  SECRETARY
}

enum STATUS {
  ACTIVE
  DELETED
}

enum PHASE_STATUS {
  ACTIVE
  INACTIVE
  DELETED
  FULL_SLOT
}

enum MISCELLANEOUS {
  ZERO
  TEN
}

enum COMMISSION {
  FIVE
  SEVEN
  TEN
  FIFTEEN
}

enum MODE_OF_PAYMENT {
  CASH
  GCASH
  ONLINE_BANKING
  CHEQUE
}

enum PAYMENT_TYPE {
  CASH
  INSTALLMENT
}

enum PLATFORM {
  WEB
  MOBILE
}

model User {
  id         String  @id @default(cuid())
  firstName  String
  middleName String?
  lastName   String
  email      String
  password   String
  phone      String?
  mobile     String

  houseNumber String?
  street      String
  barangay    String
  subdivision String?
  city        String
  province    String?
  region      String
  zip         String?

  role ROLE

  admin       Admin?
  secretary   Secretary?
  authSession AuthSession[]

  status STATUS @default(ACTIVE)

  dateCreated DateTime  @default(now())
  dateUpdated DateTime  @updatedAt
  dateDeleted DateTime?
}

model AuthSession {
  id         String  @id @default(cuid())
  userId     String
  token_hash String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  expiration DateTime?

  created_by  String?
  modified_by String?
  deleted_by  String?

  created_date  DateTime  @default(now())
  modified_date DateTime  @updatedAt
  deleted_date  DateTime?
}

model Admin {
  id           String  @id @default(cuid())
  userId       String  @unique
  isSuperAdmin Boolean @default(false)
  accessLevel  Int[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  dateCreated DateTime  @default(now())
  dateUpdated DateTime  @updatedAt
  dateDeleted DateTime?
}

model Secretary {
  id          String @id @default(cuid())
  userId      String @unique
  accessLevel Int[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  dateCreated DateTime  @default(now())
  dateUpdated DateTime  @updatedAt
  dateDeleted DateTime?
}

model Client {
  id            String  @id @default(cuid())
  firstName     String
  middleName    String?
  lastName      String
  email         String
  contactNumber String
  tinNumber     String

  houseNumber String?
  street      String
  barangay    String
  subdivision String?
  city        String
  province    String?
  region      String
  zip         String?

  project  UserProject[]
  contract Contract[]

  status STATUS @default(ACTIVE)

  dateCreated DateTime  @default(now())
  dateUpdated DateTime  @updatedAt
  dateDeleted DateTime?
}

model Project {
  id          String  @id @default(cuid())
  projectName String
  description String?

  houseNumber String?
  street      String
  barangay    String
  subdivision String?
  city        String
  province    String?
  region      String
  zip         String?

  client UserProject[]
  phase  Phase[]

  status STATUS @default(ACTIVE)

  dateCreated DateTime  @default(now())
  dateUpdated DateTime  @updatedAt
  dateDeleted DateTime?
}

model Contract {
  id       String @id @default(cuid())
  clientId String
  lotId    String

  sqmPrice            Float
  downPayment         Float
  terms               Int
  miscellaneous       MISCELLANEOUS
  agent               String
  commission          COMMISSION
  balance             Float
  total               Float
  paymentType         PAYMENT_TYPE
  recurringPaymentDay Int?
  nextPaymentDate     DateTime?

  client  Client?   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  lot     Lot?      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  payment Payment[]

  status STATUS @default(ACTIVE)

  dateCreated DateTime  @default(now())
  dateUpdated DateTime  @updatedAt
  dateDeleted DateTime?
}

model Phase {
  id        String @id @default(cuid())
  projectId String

  title  String
  status PHASE_STATUS @default(ACTIVE)

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  block   Block[]

  dateCreated DateTime  @default(now())
  dateUpdated DateTime  @updatedAt
  dateDeleted DateTime?
}

model Block {
  id      String @id @default(cuid())
  phaseId String
  title   String

  status STATUS @default(ACTIVE)

  phase Phase @relation(fields: [phaseId], references: [id], onDelete: Cascade)
  lot   Lot[]

  dateCreated DateTime  @default(now())
  dateUpdated DateTime  @updatedAt
  dateDeleted DateTime?
}

model Lot {
  id      String @id @default(cuid())
  blockId String
  title   String
  sqm     Float?

  status STATUS @default(ACTIVE)

  block    Block      @relation(fields: [blockId], references: [id], onDelete: Cascade)
  contract Contract[]

  dateCreated DateTime  @default(now())
  dateUpdated DateTime  @updatedAt
  dateDeleted DateTime?
}

model Payment {
  id         String @id @default(cuid())
  contractId String

  modeOfPayment   MODE_OF_PAYMENT
  paymentDate     String
  amount          Float
  referenceNumber String?

  contract Contract @relation(fields: [contractId], references: [id], onDelete: Cascade)

  status STATUS @default(ACTIVE)

  dateCreated DateTime  @default(now())
  dateUpdated DateTime  @updatedAt
  dateDeleted DateTime?
}

// JUNCTION TABLE
model UserProject {
  clientId String @unique
  client   Client @relation(fields: [clientId], references: [id], onDelete: Cascade)

  projectId String  @unique
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@id([clientId, projectId])
}
